syntax = "v1"

info (
	title: "q9090960bnb3"
	desc:  "haha"
	date:  "2024-10-31"
)

type (
	UserLoginReq {
		UserName string `json:"username"`
		Password string `json:"password"`
	}
	UserLoginResp {
		Avatar       string   `json:"avatar"`
		Username     string   `json:"username"`
		Nickname     string   `json:"nickname"`
		Roles        []string `json:"roles"`
		Permissions  []string `json:"permissions"`
		AccessToken  string   `json:"accessToken"`
		RefreshToken string   `json:"refreshToken"`
		Expires      string   `json:"expires"`
	}
)

service user-api {
	@doc "用户登录"
	@handler userLogin
	post /api/login (UserLoginReq) returns (UserLoginResp)
}

type (
	UserRefreshTokenReq  {}
	UserRefreshTokenResp {
		AccessToken  string `json:"accessToken"`
		RefreshToken string `json:"refreshToken"`
		Expires      string `json:"expires"`
	}
)

@server (
	jwt: Auth // 开启 jwt 认证
)
service user-api {
	@doc "刷新token"
	@handler UserRefreshToken
	post /api/refresh-token (UserRefreshTokenReq) returns (UserRefreshTokenResp)
}

type RouterData {
	Path      string        `json:"path"`
	Name      string        `json:"name,omitempty"`
	Component string        `json:"component,omitempty"`
	Meta      Meta          `json:"meta"`
	Children  []*RouterData `json:"children,omitempty"`
}

type Meta {
	Title string   `json:"title"`
	Icon  string   `json:"icon,omitempty"`
	Rank  int64    `json:"rank,omitempty"`
	Roles []string `json:"roles,omitempty"`
	Auths []string `json:"auths,omitempty"`
}

type (
	UserRouterReq  {}
)

@server (
	jwt: Auth // 开启 jwt 认证
)
service user-api {
	@doc "获取路由"
	@handler userRouter
	get /api/get-async-routes (UserRouterReq) returns ([]*RouterData)
}

type (
	UserRoleReq {
		Name     string `json:"name,optional"`
		Code     string `json:"code,optional"`
		Status   *int64 `json:"status,optional"`
		Page     int64  `json:"page,default=1"`
		PageSize int64  `json:"pageSize,default=10"`
	}
	UserRoleData {
		Id         int64  `json:"id"`
		Code       string `json:"code"`
		Name       string `json:"name"`
		Status     int64  `json:"status"`
		Remark     string `json:"remark"`
		CreateTime int64  `json:"createTime"`
		UpdateTime int64  `json:"updateTime"`
	}
	UserRoleResp {
		List  []*UserRoleData `json:"list"`
		Total int64           `json:"total"`
	}
)

@server (
	jwt: Auth // 开启 jwt 认证
)
service user-api {
	@doc "获取路由"
	@handler userRole
	post /api/role (UserRoleReq) returns ([]*UserRoleResp)
}

type (
	UserRoleMenuReq  {}
	UserRoleMenu {
		ParentId int64  `json:"parentId"`
		Id       int64  `json:"id"`
		MenuType int64  `json:"menuType"`
		Title    string `json:"title"`
	}
)

@server (
	jwt: Auth // 开启 jwt 认证
)
service user-api {
	@doc "获取菜单"
	@handler userMenu
	get /api/role-menu (UserRoleMenuReq) returns ([]*UserRoleMenu)
}

type (
	UserRoleMenuIDReq {
		Id int64 `json:"id"`
	}
)

@server (
	jwt: Auth // 开启 jwt 认证
)
service user-api {
	@doc "获取菜单详情"
	@handler userMenuID
	post /api/role-menu-ids (UserRoleMenuIDReq) returns ([]int64)
}

type (
	UserRoleCreateReq {
		Name   string `json:"name"`
		Code   string `json:"code"`
		Remark string `json:"remark"`
	}
	UserRoleDeleteReq {
		Id int64 `json:"id"`
	}
	UserRoleUpdateReq {
		Id     int64  `json:"id"`
		Code   string `json:"code"`
		Name   string `json:"name"`
		Remark string `json:"remark"`
	}
	UserRolePatchReq {
		Id     int64   `json:"id"`
		Code   *string `json:"code,optional"`
		Name   *string `json:"name,optional"`
		Status *int64  `json:"status,optional"`
		Remark *string `json:"remark,optional"`
	}
)

@server (
	jwt: Auth
)
service user-api {
	@doc "增加角色"
	@handler UserRoleCreate
	post /api/roleopt (UserRoleCreateReq) returns (string)

	@doc "删除角色"
	@handler UserRoleDelete
	delete /api/roleopt (UserRoleDeleteReq) returns (string)

	@doc "修改角色"
	@handler UserRoleUpdate
	put /api/roleopt (UserRoleUpdateReq) returns (string)

	@doc "修改角色某个属性"
	@handler UserRolePatch
	patch /api/roleopt (UserRolePatchReq) returns (string)
}

